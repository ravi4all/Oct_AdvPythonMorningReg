---------------- Server ----------------
First we import the python socket library.
Then we define a main function
We define two variables, a host and a port, here the local machine is the host thus ip address of 127.0.0.1 & I have chosen randomly port 5000 and it is advised to use anything above 1024 as upto 1024 core services use the ports
Then we define a variable mySocket which is an instance of a Python socket
In server it is important to bind the socket to host and port thus we bind it, tip: bind takes a Tuple, thus we have double brackets surrounding it
Then we call the listen method and pass 1 to it so that it will perpetually listen till we close the connection
Then we have two variables conn and addr which will hold the connection from client and the address of the client
Then we print the clients address and create another variable data which is receiving data from connection and we have to decode it, this step is necessary for Python 3 as normal string with str won’t pass through socket and str does not implement buffer interface anymore.
We run all this in a while true loop so unless the the connection is closed we run this and server’s keeps on listening when the data is received server transforms in into uppercase by calling upper method and sends the string back to client and we encode too as normal string will fail to transmit properly

--------------- Client ----------------
Well similarly we import the socket module and create similar variable mySocket and connect via passing server’s address 127.0.0.1 and port 5000
However, one noticeable difference is we do not have to add bind as client does not need to bind, this is a very basic yet important concept of network programming
Then we use the input method to ask for input , see Python 3 has replaced raw_input by simply input
Then while the character typed is not “q” we keep running the loop and send the message by encoding it and when we received the processed data we decode it and print
One common thing is the main method of Python we run on both the files which is wrapped in the magic __main__ method to be run